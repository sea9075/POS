// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using POS.DataAccess.Data;

#nullable disable

namespace POS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241112015451_UpdateRoleModel")]
    partial class UpdateRoleModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("POS.Models.Setting.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TaxAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("POS.Models.Setting.CostBarcode", b =>
                {
                    b.Property<int>("CostBarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostBarcodeId"));

                    b.Property<string>("Back1")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Back2")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Back3")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("BarcodeType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Formula")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Front1")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Front2")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Front3")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number0")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number1")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number2")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number3")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number4")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number5")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number6")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number7")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number8")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Number9")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("CostBarcodeId");

                    b.HasIndex("BarcodeType")
                        .IsUnique();

                    b.ToTable("CostBarcode");
                });

            modelBuilder.Entity("POS.Models.Setting.CreditCardFee", b =>
                {
                    b.Property<int>("CreditCardFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditCardFeeId"));

                    b.Property<string>("CreditCardFeeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("CreditCardFeeId");

                    b.HasIndex("CreditCardFeeName")
                        .IsUnique();

                    b.ToTable("CreditCardFee");
                });

            modelBuilder.Entity("POS.Models.Setting.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ext")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("ShortName", "Name")
                        .IsUnique();

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Name = "Admin",
                            ShortName = "Admin",
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3721)
                        });
                });

            modelBuilder.Entity("POS.Models.Setting.Department_Function", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId", "FunctionId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("IsEnable");

                    b.HasIndex("DepartmentId", "FunctionId")
                        .IsUnique();

                    b.ToTable("Department_Function");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 1,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6536)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 2,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6540)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 3,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6542)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 4,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6543)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 5,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6544)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 6,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6545)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 7,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6546)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 8,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6547)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 9,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6548)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 10,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6549)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 11,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6550)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 12,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6551)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 13,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6553)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 14,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6554)
                        },
                        new
                        {
                            DepartmentId = 1,
                            FunctionId = 15,
                            IsEnable = true,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(6555)
                        });
                });

            modelBuilder.Entity("POS.Models.Setting.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmerencyContact")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EmerencyContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("GrossProfit")
                        .HasColumnType("int");

                    b.Property<string>("ID_Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsMarried")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SalesTarget")
                        .HasColumnType("int");

                    b.Property<string>("Skill")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex("Name", "ID_Number")
                        .IsUnique();

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "*",
                            Cellphone = "*",
                            Education = "*",
                            Email = "*",
                            EmerencyContact = "*",
                            EmerencyContactPhone = "*",
                            ID_Number = "*",
                            IsMarried = false,
                            Name = "Admin",
                            PermanentAddress = "*",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3699)
                        });
                });

            modelBuilder.Entity("POS.Models.Setting.EmployeeLogin", b =>
                {
                    b.Property<int>("EmployeeLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeLoginId"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EditSafetyStock")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LimitCheckPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LimitEditSalesOrder")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeLoginId");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeLogin");

                    b.HasData(
                        new
                        {
                            EmployeeLoginId = 1,
                            Account = "Administrator",
                            DepartmentId = 1,
                            EmployeeId = 1,
                            HashPassword = "Jxwlw+635GmPXCaLI+JE5lfM/kUoiMa5roykjbAfrPU=",
                            LimitCheckPurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3546)
                        });
                });

            modelBuilder.Entity("POS.Models.Setting.Function", b =>
                {
                    b.Property<int>("FunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FunctionId"));

                    b.Property<string>("FunctionChineseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("FunctionId");

                    b.HasIndex("FunctionName")
                        .IsUnique();

                    b.ToTable("Function");

                    b.HasData(
                        new
                        {
                            FunctionId = 1,
                            FunctionChineseName = "總公司 - 基本資料",
                            FunctionName = "Company",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3777)
                        },
                        new
                        {
                            FunctionId = 2,
                            FunctionChineseName = "條碼成本編碼",
                            FunctionName = "CostBarcode",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3779)
                        },
                        new
                        {
                            FunctionId = 3,
                            FunctionChineseName = "信用卡手續費",
                            FunctionName = "CreditCardFee",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3780)
                        },
                        new
                        {
                            FunctionId = 4,
                            FunctionChineseName = "公司部門資料",
                            FunctionName = "Department",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3781)
                        },
                        new
                        {
                            FunctionId = 5,
                            FunctionChineseName = "",
                            FunctionName = "Department_Function",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3792)
                        },
                        new
                        {
                            FunctionId = 6,
                            FunctionChineseName = "員工基本資料",
                            FunctionName = "Employee",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3793)
                        },
                        new
                        {
                            FunctionId = 7,
                            FunctionChineseName = "員工登入資料",
                            FunctionName = "EmployeeLogin",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3794)
                        },
                        new
                        {
                            FunctionId = 8,
                            FunctionChineseName = "程式功能",
                            FunctionName = "Function",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3795)
                        },
                        new
                        {
                            FunctionId = 9,
                            FunctionChineseName = "公司發票資料",
                            FunctionName = "InvoiceInfo",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3796)
                        },
                        new
                        {
                            FunctionId = 10,
                            FunctionChineseName = "系統 IP 權限設定",
                            FunctionName = "IP_Permission",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3797)
                        },
                        new
                        {
                            FunctionId = 11,
                            FunctionChineseName = "群組資料設定",
                            FunctionName = "Role",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3798)
                        },
                        new
                        {
                            FunctionId = 12,
                            FunctionChineseName = "各店點 - 基本資料",
                            FunctionName = "Shop",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3799)
                        },
                        new
                        {
                            FunctionId = 13,
                            FunctionChineseName = "各店點 - 目標設定",
                            FunctionName = "ShopSalesTarget",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3800)
                        },
                        new
                        {
                            FunctionId = 14,
                            FunctionChineseName = "各倉庫 - 基本資料",
                            FunctionName = "Stock",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3802)
                        },
                        new
                        {
                            FunctionId = 15,
                            FunctionChineseName = "門號系統商設定",
                            FunctionName = "TelecomSetting",
                            Group = 0,
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3803)
                        });
                });

            modelBuilder.Entity("POS.Models.Setting.IP_Permission", b =>
                {
                    b.Property<int>("IP_PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IP_PermissionId"));

                    b.Property<string>("IP_Address")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("IP_PermissionId");

                    b.HasIndex("IP_Address", "Name")
                        .IsUnique();

                    b.ToTable("IP_Permission");
                });

            modelBuilder.Entity("POS.Models.Setting.InvoiceInfo", b =>
                {
                    b.Property<int>("InvoiceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceInfoId"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TaxAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxIDNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceInfoId");

                    b.HasIndex("TaxIDNumber", "BusinessName")
                        .IsUnique();

                    b.ToTable("InvoiceInfo");
                });

            modelBuilder.Entity("POS.Models.Setting.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("CanAudit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReview")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.HasIndex("ShortName", "Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CanAudit = true,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanPrint = true,
                            CanRead = true,
                            CanReview = true,
                            Name = "Admin",
                            ShortName = "Admin",
                            Timeset = new DateTime(2024, 11, 12, 9, 54, 48, 265, DateTimeKind.Local).AddTicks(3755)
                        });
                });

            modelBuilder.Entity("POS.Models.Setting.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"));

                    b.Property<string>("BusinessTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("Group")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RespomsiblePerson")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SalesOrderTitle")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("TaxIDNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ShopId");

                    b.HasIndex("RespomsiblePerson");

                    b.HasIndex("Name", "TaxIDNumber")
                        .IsUnique();

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("POS.Models.Setting.ShopSalesTarget", b =>
                {
                    b.Property<int>("ShopSalesTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopSalesTargetId"));

                    b.Property<int?>("MonthlyGrossProfitTarget")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlySalesTarget")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearAndMonth")
                        .HasColumnType("datetime2");

                    b.HasKey("ShopSalesTargetId");

                    b.HasIndex("ShopId", "YearAndMonth")
                        .IsUnique();

                    b.ToTable("ShopSalesTarget");
                });

            modelBuilder.Entity("POS.Models.Setting.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("Group")
                        .HasColumnType("int");

                    b.Property<bool>("IsShowFront")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowHeadquarters")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.HasKey("StockId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ShopId")
                        .IsUnique()
                        .HasFilter("[ShopId] IS NOT NULL");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("POS.Models.Setting.TelecomSetting", b =>
                {
                    b.Property<int>("TelecomSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TelecomSettingId"));

                    b.Property<string>("AgentReceiptCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("CountAgentReceiptGrossProfitFormula")
                        .HasColumnType("decimal(7,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Timeset")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalAgentReceiptGrossProfitFormula")
                        .HasColumnType("decimal(7,4)");

                    b.HasKey("TelecomSettingId");

                    b.HasIndex("ShopId");

                    b.HasIndex("ShortName", "ShopId")
                        .IsUnique();

                    b.ToTable("TelecomSetting");
                });

            modelBuilder.Entity("POS.Models.Setting.Department_Function", b =>
                {
                    b.HasOne("POS.Models.Setting.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.Setting.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("POS.Models.Setting.EmployeeLogin", b =>
                {
                    b.HasOne("POS.Models.Setting.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.Setting.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.Setting.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("POS.Models.Setting.ShopSalesTarget", b =>
                {
                    b.HasOne("POS.Models.Setting.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("POS.Models.Setting.Stock", b =>
                {
                    b.HasOne("POS.Models.Setting.Shop", "Shop")
                        .WithOne("Stock")
                        .HasForeignKey("POS.Models.Setting.Stock", "ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("POS.Models.Setting.TelecomSetting", b =>
                {
                    b.HasOne("POS.Models.Setting.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("POS.Models.Setting.Shop", b =>
                {
                    b.Navigation("Stock")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
